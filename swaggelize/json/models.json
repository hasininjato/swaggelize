[
    {
        "sequelizeModel": "Instrument",
        "value": [
            {
                "field": "id",
                "type": "field",
                "object": {
                    "allowNull": false,
                    "autoIncrement": true,
                    "primaryKey": true,
                    "type": "DataTypes.INTEGER"
                },
                "comment": {
                    "methods": [
                        "list",
                        "item"
                    ],
                    "description": ""
                }
            },
            {
                "field": "type",
                "type": "field",
                "object": {
                    "allowNull": false,
                    "type": "DataTypes.STRING"
                },
                "comment": {
                    "methods": [
                        "list",
                        "item",
                        "put",
                        "post"
                    ],
                    "description": "type of the instrument"
                }
            },
            {
                "field": "purchaseDate",
                "type": "field",
                "object": {
                    "allowNull": false,
                    "type": "DataTypes.DATE"
                },
                "comment": {
                    "methods": [
                        "list",
                        "item"
                    ],
                    "description": ""
                }
            }
        ],
        "relations": [
            {
                "type": "relation",
                "relation": "belongsToMany",
                "source": "User",
                "target": "Instrument",
                "args": [
                    "Instrument",
                    {
                        "through": "InstrumentUsers",
                        "as": "Instruments"
                    }
                ]
            },
            {
                "type": "relation",
                "relation": "belongsToMany",
                "source": "Instrument",
                "target": "User",
                "args": [
                    "User",
                    {
                        "through": "InstrumentUsers",
                        "as": "Users"
                    }
                ]
            }
        ]
    },
    {
        "sequelizeModel": "Post",
        "value": [
            {
                "field": "title",
                "type": "field",
                "object": "DataTypes.STRING",
                "comment": {
                    "methods": [
                        "list",
                        "item",
                        "put",
                        "post"
                    ],
                    "description": "Post title"
                }
            },
            {
                "field": "content",
                "type": "field",
                "object": "DataTypes.TEXT",
                "comment": {
                    "methods": [
                        "list",
                        "item",
                        "put",
                        "post"
                    ],
                    "description": "Post content"
                }
            }
        ],
        "relations": [
            {
                "type": "relation",
                "relation": "hasMany",
                "source": "User",
                "target": "Post",
                "args": [
                    "Post",
                    {
                        "onDelete": "CASCADE",
                        "as": "Posts"
                    }
                ]
            }
        ]
    },
    {
        "sequelizeModel": "PostTags",
        "value": [
            {
                "field": "postId",
                "type": "field",
                "object": {
                    "type": "DataTypes.INTEGER",
                    "references": {
                        "model": "Post",
                        "key": "id"
                    }
                },
                "comment": {
                    "methods": [
                        "list",
                        "item",
                        "put",
                        "post"
                    ],
                    "description": "Tag name"
                }
            },
            {
                "field": "tagId",
                "type": "field",
                "object": {
                    "type": "DataTypes.INTEGER",
                    "references": {
                        "model": "Tag",
                        "key": "id"
                    }
                },
                "comment": {
                    "methods": [
                        "list",
                        "item",
                        "put",
                        "post"
                    ],
                    "description": "Tag name"
                }
            }
        ],
        "relations": [
            {
                "type": "relation",
                "relation": "belongsToMany",
                "source": "Post",
                "target": "Tag",
                "args": [
                    "Tag",
                    {
                        "through": "PostTags",
                        "as": "Tags"
                    }
                ]
            },
            {
                "type": "relation",
                "relation": "belongsToMany",
                "source": "Tag",
                "target": "Post",
                "args": [
                    "Post",
                    {
                        "through": "PostTags",
                        "as": "Posts"
                    }
                ]
            }
        ]
    },
    {
        "sequelizeModel": "Profile",
        "value": [
            {
                "field": "bio",
                "type": "field",
                "object": "DataTypes.TEXT",
                "comment": {
                    "methods": [
                        "list",
                        "item",
                        "put",
                        "post"
                    ],
                    "description": "Profile ID"
                }
            }
        ],
        "relations": [
            {
                "type": "relation",
                "relation": "hasOne",
                "source": "User",
                "target": "Profile",
                "args": [
                    "Profile"
                ]
            }
        ]
    },
    {
        "sequelizeModel": "Tag",
        "value": [
            {
                "field": "name",
                "type": "field",
                "object": "DataTypes.STRING",
                "comment": {
                    "methods": [
                        "list",
                        "item",
                        "put",
                        "post"
                    ],
                    "description": "Tag name"
                }
            }
        ],
        "relations": []
    },
    {
        "sequelizeModel": "Transaction",
        "value": [
            {
                "field": "id",
                "type": "field",
                "object": {
                    "type": "DataTypes.INTEGER",
                    "primaryKey": true,
                    "autoIncrement": true,
                    "allowNull": false
                },
                "comment": {
                    "methods": [
                        "item",
                        "list"
                    ],
                    "description": "Id of the transaction"
                }
            },
            {
                "field": "amount",
                "type": "field",
                "object": {
                    "type": "DataTypes.DECIMAL",
                    "allowNull": false,
                    "unique": false,
                    "validate": {
                        "notNull": {
                            "msg": "Amount is required"
                        },
                        "isDecimal": {
                            "msg": "Amount must be a valid decimal number"
                        },
                        "notEmpty": {
                            "msg": "Amount cannot be empty"
                        },
                        "min": {
                            "args": [
                                0.01
                            ],
                            "msg": "Amount must be greater than 0"
                        }
                    }
                },
                "comment": {
                    "methods": [
                        "item",
                        "list",
                        "put",
                        "post"
                    ],
                    "description": "Amount of the transaction"
                }
            },
            {
                "field": "description",
                "type": "field",
                "object": {
                    "type": "DataTypes.STRING",
                    "allowNull": false,
                    "unique": false,
                    "validate": {
                        "notNull": {
                            "msg": "Description is required"
                        },
                        "notEmpty": {
                            "msg": "Description cannot be empty"
                        }
                    }
                },
                "comment": {
                    "methods": [
                        "item",
                        "list",
                        "put",
                        "post"
                    ],
                    "description": "Description of the transaction"
                }
            },
            {
                "field": "date",
                "type": "field",
                "object": {
                    "type": "DataTypes.DATE",
                    "allowNull": false,
                    "defaultValue": "DataTypes.NOW"
                },
                "comment": {
                    "methods": [
                        "item",
                        "list"
                    ],
                    "description": ""
                }
            }
        ],
        "relations": [
            {
                "type": "relation",
                "relation": "hasMany",
                "source": "User",
                "target": "Transaction",
                "args": [
                    "Transaction",
                    {
                        "foreignKey": "userId",
                        "as": "Transactions"
                    }
                ]
            }
        ]
    },
    {
        "sequelizeModel": "User",
        "value": [
            {
                "field": "id",
                "type": "field",
                "object": {
                    "type": "DataTypes.INTEGER",
                    "primaryKey": true,
                    "autoIncrement": true,
                    "allowNull": false
                },
                "comment": {
                    "methods": [
                        "item",
                        "list"
                    ],
                    "description": "Id of the user"
                }
            },
            {
                "field": "fullname",
                "type": "field",
                "object": {
                    "type": "DataTypes.STRING",
                    "allowNull": false,
                    "unique": false,
                    "validate": {
                        "notNull": {
                            "msg": "Full name is required"
                        },
                        "notEmpty": {
                            "msg": "Full name cannot be empty"
                        }
                    }
                },
                "comment": {
                    "methods": [
                        "item",
                        "list",
                        "put",
                        "post"
                    ],
                    "description": ""
                }
            },
            {
                "field": "email",
                "type": "field",
                "object": {
                    "type": "DataTypes.STRING",
                    "allowNull": false,
                    "unique": {
                        "name": "unique_email",
                        "msg": "This email is already in use"
                    },
                    "validate": {
                        "notNull": {
                            "msg": "Email is required"
                        },
                        "notEmpty": {
                            "msg": "Email cannot be empty"
                        },
                        "isEmail": {
                            "msg": "Invalid email"
                        }
                    }
                },
                "comment": {
                    "methods": [
                        "item",
                        "list",
                        "put",
                        "post"
                    ],
                    "description": ""
                }
            },
            {
                "field": "password",
                "type": "field",
                "object": {
                    "type": "DataTypes.STRING",
                    "allowNull": false,
                    "validate": {
                        "notNull": {
                            "msg": "Password is required"
                        },
                        "notEmpty": {
                            "msg": "Password cannot be empty"
                        }
                    }
                },
                "comment": {
                    "methods": [
                        "put",
                        "post"
                    ],
                    "description": ""
                }
            }
        ],
        "relations": []
    }
]